# -*- coding: utf-8 -*-
__author__ = 'Apple'

#####################################
#      有节制地使用from...import语句  #
##################################

'''
    Python提供3种方式引入外部模块：import语句，from...import...
    以及__import__函数。其中较为常见的为前面两种，而__import__函数
    与import语句类似，不同点在于前者显式地将模块的名称作为字符串传递并
    赋值给命名空间的变量。
    在使用import的时候注意以下几点：
        一般情况下尽量优先使用import a形式，如访问B时需要使用a.B的形式。
        有节制地使用from a import B形式，可以直接访问。
        尽量避免使用from a import *,因为这会污染命名空间，并且无法清晰
        地表示导入了哪些对象
'''
# Python的import机制如下
'''
    Python在初始化运行环境的时候会预先加载一批内建模块到内存中，这些模块相关
    的信息被存到sys.modules中，导入sys模块后在Python解释器中sys.modules
    .items()便可显式所有预加载模块的相关信息，当加载一个模块的时候，解释器实际上
    要完成以下动作：
        1）在sys.modules中进行搜索看看该模块是否存在，如果存在，则将其导入到当前
        局部命名空间，加载结束。
        2）如果在sys.modules中找不到对应模块的对称，则为需要导入的模块创建一个字典
        对象，并将该对象信息插入sys.modules
        3）加载前确认是否需要对模块对应的文件进行编译，如果需要则先进行编译
        4）执行动态加载，在当前模块的命名空间中执行编译后的字节码，并将其中所有的对象
        放入模块对应的字典中。
'''
