# -*- coding: utf-8 -*-
__author__ = 'Apple'

##################################
#    考虑兼容性，尽可能的使用Unicode #
################################

'''
    Python内建的字符串有两种类型：str和Unicode，他们拥有
    公共的祖先basestring.其中Unicode是Python2.0中引入
    的一种新的数据类型，所有的Unicode字符串都是Unicode类
    型的实例。如1-18
'''
# 1-18
strUnicode = u'unicode'
print(strUnicode)
'''
    Python中为什么需要加入对Unicode的支持呢？我们先来了解以下
    Unicode相关的背景知识
    在Unicode之前，最早的是ASCLL编码用一个字节（8bit,最高位为0）
    只能表示128个字符，如英文大小写字符，数字以及其他符号等。但世界
    上的语言不只有一种，不同种语言所包含的字符数量也不相同，对于很多
    语言来说128个字符数是远远不够的，即使对ASCLL进行扩展，256个字符
    不能满足要求，于是出现了各种编码又如中国的编码GD，比如"我"字在
    GB2312中表示为0x4650,而繁体中文Big5中的编码为0XA7DA，而0XA7DA在
    GB2312中却表示琖，要解决这个问题必须要有一个统一的编码，由此unicode
    出现了万国码，
'''